name: Infrastructure as Code CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'environments/**'
      - 'modules/**'

  # Allow manual workflow dispatch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: 1.7.0  # Updated version
  TERRAGRUNT_VERSION: 0.55.0  # Updated version
  AWS_REGION: us-west-2

permissions:
  contents: read
  security-events: write
  id-token: write
  pull-requests: write
  actions: read

jobs:
  # Security and validation checks
  security-checks:
    name: Security and Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          echo "## Terraform Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "Checking Terraform file formatting..."
          # Check format for all .tf files
          if terraform fmt -check -recursive; then
            echo "✅ All Terraform files are properly formatted." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Terraform files are not properly formatted." >> $GITHUB_STEP_SUMMARY
            echo "Run 'terraform fmt -recursive' to fix formatting issues."
            exit 1
          fi

      - name: Terraform Validation
        run: |
          echo "Validating Terraform configurations..."
          
          # Only validate environments that have main.tf files
          for env_dir in environments/*/; do
            if [[ -f "$env_dir/main.tf" ]]; then
              echo "Validating environment: $env_dir"
              cd "$env_dir"
              terraform init -backend=false -input=false
              terraform validate
              cd - > /dev/null
            else
              echo "Skipping $env_dir - no main.tf found"
            fi
          done
          
          # Validate modules that have complete configurations
          for module_dir in modules/*/*/; do
            if [[ -f "$module_dir/main.tf" ]]; then
              echo "Validating module: $module_dir"
              cd "$module_dir"
              terraform init -backend=false -input=false
              terraform validate
              cd - > /dev/null
            else
              echo "Skipping $module_dir - no main.tf found"
            fi
          done
          
          echo "✅ Terraform validation completed" >> $GITHUB_STEP_SUMMARY

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Run TFLint
        run: |
          tflint --recursive
          echo "✅ TFLint analysis completed" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Create reports directory
        run: mkdir -p reports

      - name: Run Checkov (Security Scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: reports/checkov.sarif
        continue-on-error: true

      - name: Upload Checkov SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/checkov.sarif') != ''
        with:
          sarif_file: reports/checkov.sarif

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: .
        continue-on-error: true

  # Determine which environments to deploy
  determine-environments:
    name: Determine Environments
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      environments: ${{ steps.determine.outputs.environments }}
      matrix: ${{ steps.determine.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environments to deploy
        id: determine
        run: |
          echo "## Environment Selection" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual dispatch - use specified environment
            echo "environments=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
            echo "matrix={\"environment\":[\"${{ github.event.inputs.environment }}\"]}" >> $GITHUB_OUTPUT
            echo "- **Selected Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Main branch - deploy to staging
            echo "environments=[\"staging\"]" >> $GITHUB_OUTPUT
            echo "matrix={\"environment\":[\"staging\"]}" >> $GITHUB_OUTPUT
            echo "- **Selected Environment**: staging (main branch)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            # Develop branch - deploy to dev
            echo "environments=[\"dev\"]" >> $GITHUB_OUTPUT
            echo "matrix={\"environment\":[\"dev\"]}" >> $GITHUB_OUTPUT
            echo "- **Selected Environment**: dev (develop branch)" >> $GITHUB_STEP_SUMMARY
          else
            # PR or other branches - only plan for dev
            echo "environments=[\"dev\"]" >> $GITHUB_OUTPUT
            echo "matrix={\"environment\":[\"dev\"]}" >> $GITHUB_OUTPUT
            echo "- **Selected Environment**: dev (pull request)" >> $GITHUB_STEP_SUMMARY
          fi

  # Plan infrastructure changes
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [security-checks, determine-environments]
    timeout-minutes: 30
    strategy:
      matrix: ${{ fromJson(needs.determine-environments.outputs.matrix) }}
    env:
      ENVIRONMENT: ${{ matrix.environment }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-terraform
          role-session-name: terraform-${{ matrix.environment }}-${{ github.run_number }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          cd environments/${{ matrix.environment }}
          terraform init

      - name: Terraform Plan
        run: |
          cd environments/${{ matrix.environment }}
          terraform plan -out=tfplan-${{ matrix.environment }}-${{ github.run_number }}
          echo "✅ Terraform plan completed for ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4  # Updated from v3
        with:
          name: tfplan-${{ matrix.environment }}-${{ github.run_number }}
          path: environments/${{ matrix.environment }}/tfplan-${{ matrix.environment }}-${{ github.run_number }}
          retention-days: 30

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { exec } = require('child_process');
            
            exec(`cd environments/${{ matrix.environment }} && terraform show -no-color tfplan-${{ matrix.environment }}-${{ github.run_number }}`, (error, stdout) => {
              if (error) {
                console.error(error);
                return;
              }
              
              const output = stdout.slice(0, 60000); // Limit output size
              const comment = `## Terraform Plan for ${{ matrix.environment }}
              
              \`\`\`terraform
              ${output}
              \`\`\`
              
              ${output.length >= 60000 ? '\n**Note: Output truncated due to length limits.**' : ''}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            });

  # Apply infrastructure changes (with environment-specific approvals)
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan, determine-environments]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    timeout-minutes: 60
    strategy:
      matrix: ${{ fromJson(needs.determine-environments.outputs.matrix) }}
    environment: 
      name: ${{ matrix.environment }}
      url: ${{ steps.apply.outputs.cluster_endpoint }}
    env:
      ENVIRONMENT: ${{ matrix.environment }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-terraform
          role-session-name: terraform-apply-${{ matrix.environment }}-${{ github.run_number }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Download plan artifact
        uses: actions/download-artifact@v4  # Updated from v3
        with:
          name: tfplan-${{ matrix.environment }}-${{ github.run_number }}
          path: environments/${{ matrix.environment }}/

      - name: Terraform Init
        run: |
          cd environments/${{ matrix.environment }}
          terraform init

      - name: Terraform Apply
        id: apply
        run: |
          cd environments/${{ matrix.environment }}
          terraform apply -auto-approve tfplan-${{ matrix.environment }}-${{ github.run_number }}
          
          # Capture outputs for environment URL
          CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint || echo "")
          echo "cluster_endpoint=$CLUSTER_ENDPOINT" >> $GITHUB_OUTPUT
          
          echo "✅ Terraform apply completed for ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY

      - name: Post-deployment validation
        run: |
          cd environments/${{ matrix.environment }}
          # Basic validation - can be extended based on your infrastructure
          echo "✅ Post-deployment validation completed" >> $GITHUB_STEP_SUMMARY

  # Destroy infrastructure (manual only, with extra protection)
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: 
      name: destroy-${{ github.event.inputs.environment }}
    timeout-minutes: 60
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Confirm destruction
        run: |
          echo "🚨 DESTRUCTIVE ACTION: About to destroy ${{ github.event.inputs.environment }} environment"
          echo "This action is irreversible and will remove all infrastructure resources."
          echo "⚠️ **DESTROY Operation Initiated**" >> $GITHUB_STEP_SUMMARY

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-terraform
          role-session-name: terraform-destroy-${{ github.event.inputs.environment }}-${{ github.run_number }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          cd environments/${{ github.event.inputs.environment }}
          terraform init

      - name: Terraform Destroy
        run: |
          cd environments/${{ github.event.inputs.environment }}
          terraform destroy -auto-approve
          echo "💥 Infrastructure destroyed for ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY

  # Notification on completion
  notify:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [terraform-apply, determine-environments]
    if: always() && (needs.terraform-apply.result == 'success' || needs.terraform-apply.result == 'failure')
    steps:
      - name: Generate final summary
        run: |
          echo "## Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ join(fromJson(needs.determine-environments.outputs.environments), ', ') }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.terraform-apply.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
